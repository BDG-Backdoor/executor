name: Build Roblox Executor iOS Dynamic Library

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest  # Use macOS for iOS compatible builds

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        echo "Installing dependencies..."
        # Install Homebrew packages
        brew install lua cmake pkg-config
        brew install luarocks openssl sqlite3
        brew install libzip json-c
        
        # Install iOS development dependencies
        brew install llvm
        brew install libomp
        
        # Install LuaRocks libraries
        luarocks install luafilesystem
        
        # Install Dobby library (for hooking functionality)
        # First try to use brew, but if it fails, use direct download
        brew install dobby || true
        
        if [ ! -d "/usr/local/include/dobby" ]; then
          echo "Dobby not installed via Homebrew, downloading from source..."
          git clone --depth=1 https://github.com/jmpews/Dobby.git
          cd Dobby
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DDOBBY_BUILD_SHARED_LIBRARY=ON
          make -j4
          sudo make install
          cd ../..
        fi
        
        # Create AI data directories
        mkdir -p Resources/AIData/LocalModels
        mkdir -p Resources/AIData/Vulnerabilities

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Build Dynamic Library
      id: build
      run: |
        echo "Building the iOS dynamic library..."
        
        # Create build directory
        mkdir -p build
        
        # Configure CMake for iOS build with additional options
        cmake -S . -B build \
          -DCMAKE_OSX_ARCHITECTURES="arm64" \
          -DCMAKE_OSX_DEPLOYMENT_TARGET="15.0" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_SYSTEM_NAME=iOS \
          -DENABLE_AI_FEATURES=ON \
          -DENABLE_LOCAL_TRAINING=ON
        
        # Print config
        echo "CMake configuration:"
        cat build/CMakeCache.txt | grep -E "AI_FEATURES|LOCAL_TRAINING|DOBBY"
        
        # Build the dynamic library
        cmake --build build --config Release -j4
        
        # Set the built library path
        echo "OUTPUT_LIB_PATH=${PWD}/lib/libmylibrary.dylib" >> $GITHUB_ENV

    - name: Export built library
      run: |
        echo "Exporting the built library..."
        mkdir -p output
        
        # Try both paths since the build output might be in different locations
        if [ -f "${PWD}/lib/libmylibrary.dylib" ]; then
          cp "${PWD}/lib/libmylibrary.dylib" output/
        elif [ -f "build/libmylibrary.dylib" ]; then
          cp "build/libmylibrary.dylib" output/
        else
          # Search for the dylib
          echo "Searching for libmylibrary.dylib..."
          find ${PWD} -name "libmylibrary.dylib" -exec cp {} output/ \;
        fi
        
        # Create and copy AI data directories
        mkdir -p output/Resources/AIData
        mkdir -p output/Resources/AIData/LocalModels
        mkdir -p output/Resources/AIData/Vulnerabilities
        
        # Create some sample data
        echo "{\"version\":\"1.0.0\",\"created\":\"$(date -u '+%Y-%m-%dT%H:%M:%SZ')\"}" > output/Resources/AIData/config.json

    - name: Check Build Output
      run: |
        echo "Checking the build output..."
        if [ -f "output/libmylibrary.dylib" ]; then
          echo "✅ libmylibrary.dylib exists."
          # Show file info
          file output/libmylibrary.dylib
          # Show architecture info
          lipo -info output/libmylibrary.dylib
          # Show symbols (filtering for AI-related functions)
          nm -g output/libmylibrary.dylib | grep -i "AI" || echo "No AI symbols found"
        else
          echo "❌ libmylibrary.dylib does not exist."
          echo "Files in output directory:"
          ls -la output/
          echo "Build directory contents:"
          find build -name "*.dylib" -o -name "*.a"
          exit 1  # Exit with error if the library does not exist
        fi

    - name: Generate debug symbols
      run: |
        echo "Generating debug symbols..."
        if [ -f "output/libmylibrary.dylib" ]; then
          dsymutil output/libmylibrary.dylib -o output/libmylibrary.dSYM
          zip -r output/libmylibrary.dSYM.zip output/libmylibrary.dSYM
        fi

    - name: Upload dynamic library
      uses: actions/upload-artifact@v4
      with:
        name: roblox-executor-ios
        path: output/libmylibrary.dylib
        if-no-files-found: error

    - name: Upload debug symbols
      uses: actions/upload-artifact@v4
      with:
        name: debug-symbols
        path: output/libmylibrary.dSYM.zip
        if-no-files-found: warn

    - name: Upload resources
      uses: actions/upload-artifact@v4
      with:
        name: resources
        path: output/Resources/
        if-no-files-found: warn
