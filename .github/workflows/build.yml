name: Build Roblox Executor iOS Dynamic Library

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest  # Use macOS for iOS compatible builds

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        echo "Installing dependencies..."
        # Install Homebrew packages
        brew install cmake pkg-config
        brew install openssl sqlite3
        brew install libzip json-c
        
        # Install iOS development dependencies
        brew install llvm
        brew install libomp
        
        # Run our improved Lua finder script to handle various Lua installations
        # First, copy the script to the current directory
        cat > lua_finder.sh << 'EOF'
#!/bin/bash

# This script handles Lua installation and detection for the GitHub workflow

# Check Homebrew installation and location
echo "Checking Homebrew location and installation..."
BREW_PREFIX=$(brew --prefix)
echo "Homebrew prefix: $BREW_PREFIX"

# Install lua and luarocks explicitly
echo "Installing Lua and LuaRocks..."
brew install lua || true
brew install lua@5.4 || true
brew install luarocks || true

# Check installations
brew list lua || echo "Standard Lua not installed via Homebrew"
brew list lua@5.4 || echo "Lua 5.4 not installed via Homebrew"
brew list luarocks || echo "LuaRocks not installed via Homebrew"

# Check both lua and lua@5.4 installations
echo "Checking lua installation locations..."
LUA_PREFIX=$(brew --prefix lua 2>/dev/null || echo "")
LUA54_PREFIX=$(brew --prefix lua@5.4 2>/dev/null || echo "")
LUAROCKS_PREFIX=$(brew --prefix luarocks 2>/dev/null || echo "")

echo "Standard Lua prefix: $LUA_PREFIX"
echo "Lua 5.4 prefix: $LUA54_PREFIX"
echo "LuaRocks prefix: $LUAROCKS_PREFIX"

# Create all needed directories
mkdir -p $GITHUB_WORKSPACE/ext/lua/include
mkdir -p $GITHUB_WORKSPACE/ext/lua/lib

# Identify all possible Lua include directories
LUA_INCLUDE_DIRS=(
    "$LUA_PREFIX/include"
    "$LUA54_PREFIX/include"
    "$BREW_PREFIX/include"
    "$BREW_PREFIX/opt/lua/include"
    "$BREW_PREFIX/opt/lua@5.4/include"
    "/usr/local/include"
    "/usr/include"
)

# Identify all possible Lua lib directories
LUA_LIB_DIRS=(
    "$LUA_PREFIX/lib"
    "$LUA54_PREFIX/lib"
    "$BREW_PREFIX/lib"
    "$BREW_PREFIX/opt/lua/lib"
    "$BREW_PREFIX/opt/lua@5.4/lib"
    "/usr/local/lib"
    "/usr/lib"
)

# Show the discovered directories
echo "Checking Lua include directories:"
for dir in "${LUA_INCLUDE_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        echo "  - $dir exists"
        ls -la "$dir" | grep -i lua
    else
        echo "  - $dir does not exist"
    fi
done

echo "Checking Lua lib directories:"
for dir in "${LUA_LIB_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        echo "  - $dir exists"
        ls -la "$dir" | grep -i lua
    else
        echo "  - $dir does not exist"
    fi
done

# Create our own lua.h directly in case we can't find it
echo "Creating basic Lua headers in case none are found..."
cat > $GITHUB_WORKSPACE/ext/lua/include/lua.h << 'EOFILE'
/* Basic lua.h - autogenerated by lua_finder.sh */
#ifndef LUA_H
#define LUA_H

#include <stdarg.h>
#include <stddef.h>

#define LUA_VERSION_MAJOR	"5"
#define LUA_VERSION_MINOR	"4"
#define LUA_VERSION_RELEASE	"4"
#define LUA_VERSION_NUM		504
#define LUA_VERSION_RELEASE_NUM	(LUA_VERSION_NUM * 100 + 4)

#define LUA_REGISTRYINDEX	(-1001000)

#define LUA_OK		0
#define LUA_YIELD	1
#define LUA_ERRRUN	2
#define LUA_ERRSYNTAX	3
#define LUA_ERRMEM	4
#define LUA_ERRERR	5

typedef struct lua_State lua_State;
typedef int (*lua_CFunction) (lua_State *L);
typedef double lua_Number;
typedef long long lua_Integer;

#ifdef __cplusplus
extern "C" {
#endif

/* Dummy declarations for common Lua functions */
lua_State *lua_newstate(void *(*f)(void *ud, void *ptr, size_t osize, size_t nsize), void *ud);
void lua_close(lua_State *L);
int lua_load(lua_State *L, const char *(*reader)(lua_State *, void *, size_t *), void *dt, const char *chunkname, const char *mode);
void lua_call(lua_State *L, int nargs, int nresults);

/* End of dummy declarations */

#ifdef __cplusplus
}
#endif

#endif /* LUA_H */
EOFILE

# Create lauxlib.h
cat > $GITHUB_WORKSPACE/ext/lua/include/lauxlib.h << 'EOFILE'
/* Basic lauxlib.h - autogenerated by lua_finder.sh */
#ifndef LAUXLIB_H
#define LAUXLIB_H

#include "lua.h"
#include <stddef.h>
#include <stdio.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Dummy declarations for common Lua aux functions */
typedef struct luaL_Reg {
  const char *name;
  lua_CFunction func;
} luaL_Reg;

void luaL_openlib(lua_State *L, const char *libname, const luaL_Reg *l, int nup);
void luaL_register(lua_State *L, const char *libname, const luaL_Reg *l);
const char *luaL_checkstring(lua_State *L, int numArg);
lua_Integer luaL_checkinteger(lua_State *L, int numArg);
void luaL_checktype(lua_State *L, int narg, int t);
void *luaL_checkudata(lua_State *L, int ud, const char *tname);
int luaL_error(lua_State *L, const char *fmt, ...);

/* End of dummy declarations */

#ifdef __cplusplus
}
#endif

#endif /* LAUXLIB_H */
EOFILE

# Create lualib.h
cat > $GITHUB_WORKSPACE/ext/lua/include/lualib.h << 'EOFILE'
/* Basic lualib.h - autogenerated by lua_finder.sh */
#ifndef LUALIB_H
#define LUALIB_H

#include "lua.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Dummy declarations for Lua standard libraries */
int luaopen_base(lua_State *L);
int luaopen_table(lua_State *L);
int luaopen_io(lua_State *L);
int luaopen_os(lua_State *L);
int luaopen_string(lua_State *L);
int luaopen_math(lua_State *L);
int luaopen_debug(lua_State *L);
int luaopen_package(lua_State *L);
void luaL_openlibs(lua_State *L);

/* End of dummy declarations */

#ifdef __cplusplus
}
#endif

#endif /* LUALIB_H */
EOFILE

# Create empty library file
echo "Creating dummy library file..."
echo "/* Dummy liblua.a */" > $GITHUB_WORKSPACE/ext/lua/lib/liblua.a

# Copy real headers if found
echo "Attempting to copy real Lua headers and libraries..."
for dir in "${LUA_INCLUDE_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        echo "Checking $dir for lua headers..."
        find "$dir" -name "lua.h" -exec cp {} $GITHUB_WORKSPACE/ext/lua/include/ \; 2>/dev/null
        find "$dir" -name "luaconf.h" -exec cp {} $GITHUB_WORKSPACE/ext/lua/include/ \; 2>/dev/null
        find "$dir" -name "lauxlib.h" -exec cp {} $GITHUB_WORKSPACE/ext/lua/include/ \; 2>/dev/null
        find "$dir" -name "lualib.h" -exec cp {} $GITHUB_WORKSPACE/ext/lua/include/ \; 2>/dev/null
    fi
done

# Copy real libraries if found
for dir in "${LUA_LIB_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        echo "Checking $dir for lua libraries..."
        find "$dir" -name "liblua*.dylib" -exec cp {} $GITHUB_WORKSPACE/ext/lua/lib/ \; 2>/dev/null
        find "$dir" -name "liblua*.a" -exec cp {} $GITHUB_WORKSPACE/ext/lua/lib/ \; 2>/dev/null
    fi
done

# Check what we found
echo "Final directory contents:"
echo "Headers:"
ls -la $GITHUB_WORKSPACE/ext/lua/include/
echo "Libraries:"
ls -la $GITHUB_WORKSPACE/ext/lua/lib/

# Set environment variables
echo "LUA_DIR=$GITHUB_WORKSPACE/ext/lua" >> $GITHUB_ENV
echo "LUA_INCLUDE_DIR=$GITHUB_WORKSPACE/ext/lua/include" >> $GITHUB_ENV
echo "LUA_LIBRARIES=$GITHUB_WORKSPACE/ext/lua/lib/liblua.a" >> $GITHUB_ENV

echo "Lua finder script complete"
EOF
        
        # Make the script executable and run it
        chmod +x lua_finder.sh
        ./lua_finder.sh
        
        # Install luafilesystem using luarocks if available
        which luarocks && luarocks install luafilesystem || echo "LuaRocks not available, skipping luafilesystem installation"
        
        # Create directories for project resources
        mkdir -p Resources/AIData/LocalModels
        mkdir -p Resources/AIData/Vulnerabilities
        mkdir -p lib
        mkdir -p cmake
        
        # Make sure FindLua.cmake and FindLuaFileSystem.cmake are copied to the cmake directory
        cp -f $GITHUB_WORKSPACE/cmake/FindLua.cmake cmake/ || echo "No FindLua.cmake to copy yet"
        cp -f $GITHUB_WORKSPACE/cmake/FindLuaFileSystem.cmake cmake/ || echo "No FindLuaFileSystem.cmake to copy yet"
        
        # Show environment for debugging
        echo "DYLD_LIBRARY_PATH: $DYLD_LIBRARY_PATH"
        echo "LUA_DIR: $LUA_DIR"
        echo "LUA_INCLUDE_DIR: $LUA_INCLUDE_DIR"
        echo "LUA_LIBRARIES: $LUA_LIBRARIES"
        
        # Create directories for project resources
        mkdir -p Resources/AIData/LocalModels
        mkdir -p Resources/AIData/Vulnerabilities
        mkdir -p lib
        mkdir -p cmake
        
        # Copy our custom FindLua.cmake file into the cmake directory
        cp $GITHUB_WORKSPACE/cmake/FindLua.cmake cmake/ || echo "No FindLua.cmake to copy"
        
        # Show current environment for debugging
        echo "DYLD_LIBRARY_PATH: $DYLD_LIBRARY_PATH"
        echo "Lua location in PATH:"
        which lua
        echo "Lua version:"
        lua -v

    - name: Install Dobby (Optional)
      id: install-dobby
      continue-on-error: true
      run: |
        echo "Building Dobby from source..."
        git clone --depth=1 https://github.com/jmpews/Dobby.git
        cd Dobby
        mkdir -p build && cd build
        
        # Configure for iOS
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DDOBBY_BUILD_SHARED_LIBRARY=OFF \
          -DDOBBY_BUILD_STATIC_LIBRARY=ON
        
        # Build Dobby
        cmake --build . --config Release
        
        # Create directory structure for CMake to find Dobby
        mkdir -p $GITHUB_WORKSPACE/external/dobby/lib
        mkdir -p $GITHUB_WORKSPACE/external/dobby/include
        
        # Copy the library and header files
        cp libdobby.a $GITHUB_WORKSPACE/external/dobby/lib/
        cp -r ../include/* $GITHUB_WORKSPACE/external/dobby/include/
        
        # Set env variable for CMake to find Dobby
        echo "DOBBY_DIR=$GITHUB_WORKSPACE/external/dobby" >> $GITHUB_ENV
        echo "Dobby installation completed successfully"

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Build Dynamic Library
      id: build
      run: |
        echo "Building the iOS dynamic library..."
        
        # Create build directory
        mkdir -p build
        
        # Set additional CMake args for dependencies
        EXTRA_CMAKE_ARGS=""
        
        # Add Dobby args if available
        if [ -d "$DOBBY_DIR" ]; then
          echo "Dobby found at $DOBBY_DIR, enabling Dobby support"
          EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DDobby_DIR=$DOBBY_DIR -DUSE_DOBBY=ON"
        else
          echo "Dobby not found, building without hooking functionality"
          EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DNO_DOBBY_HOOKS=ON"
        fi
        
        # Add Lua args for custom paths
        if [ -n "$LUA_INCLUDE_DIR" ] && [ -n "$LUA_LIBRARIES" ]; then
          echo "Setting Lua paths from environment: $LUA_INCLUDE_DIR and $LUA_LIBRARIES"
          EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DLUA_INCLUDE_DIR=$LUA_INCLUDE_DIR -DLUA_LIBRARIES=$LUA_LIBRARIES"
        else
          echo "Setting fallback Lua paths from copied files"
          EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DLUA_INCLUDE_DIR=/tmp/lua_include -DLUA_LIBRARIES=/tmp/lua_lib/liblua.dylib"
        fi
        
        # Configure CMake for iOS build with all options
        echo "CMake args: $EXTRA_CMAKE_ARGS"
        
        cmake -S . -B build \
          -DCMAKE_OSX_ARCHITECTURES="arm64" \
          -DCMAKE_OSX_DEPLOYMENT_TARGET="15.0" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_SYSTEM_NAME=iOS \
          -DENABLE_AI_FEATURES=ON \
          -DENABLE_LOCAL_TRAINING=ON \
          -DCMAKE_MODULE_PATH="$GITHUB_WORKSPACE/cmake" \
          ${EXTRA_CMAKE_ARGS}
        
        # Print config and diagnostics
        echo "CMake configuration:"
        cat build/CMakeCache.txt | grep -E "AI_FEATURES|LOCAL_TRAINING|DOBBY|NO_DOBBY|LUA"
        
        # Show Lua-related variables for debugging
        echo "LUA_INCLUDE_DIR from cache: $(grep LUA_INCLUDE_DIR build/CMakeCache.txt || echo 'Not found')"
        echo "LUA_LIBRARIES from cache: $(grep LUA_LIBRARIES build/CMakeCache.txt || echo 'Not found')"
        
        # Build the dynamic library
        cmake --build build --config Release -j4
        
        # Set the built library path
        echo "OUTPUT_LIB_PATH=${PWD}/lib/libmylibrary.dylib" >> $GITHUB_ENV

    - name: Export built library
      run: |
        echo "Exporting the built library..."
        mkdir -p output
        
        # Try both paths since the build output might be in different locations
        if [ -f "${PWD}/lib/libmylibrary.dylib" ]; then
          cp "${PWD}/lib/libmylibrary.dylib" output/
        elif [ -f "build/libmylibrary.dylib" ]; then
          cp "build/libmylibrary.dylib" output/
        else
          # Search for the dylib
          echo "Searching for libmylibrary.dylib..."
          find ${PWD} -name "libmylibrary.dylib" -exec cp {} output/ \;
        fi
        
        # Create and copy AI data directories
        mkdir -p output/Resources/AIData
        mkdir -p output/Resources/AIData/LocalModels
        mkdir -p output/Resources/AIData/Vulnerabilities
        
        # Create some sample data
        echo "{\"version\":\"1.0.0\",\"created\":\"$(date -u '+%Y-%m-%dT%H:%M:%SZ')\"}" > output/Resources/AIData/config.json

    - name: Check Build Output
      run: |
        echo "Checking the build output..."
        if [ -f "output/libmylibrary.dylib" ]; then
          echo "✅ libmylibrary.dylib exists."
          # Show file info
          file output/libmylibrary.dylib
          # Show architecture info
          lipo -info output/libmylibrary.dylib
          # Show symbols (filtering for AI-related functions)
          nm -g output/libmylibrary.dylib | grep -i "AI" || echo "No AI symbols found"
        else
          echo "❌ libmylibrary.dylib does not exist."
          echo "Files in output directory:"
          ls -la output/
          echo "Build directory contents:"
          find build -name "*.dylib" -o -name "*.a"
          exit 1  # Exit with error if the library does not exist
        fi

    - name: Generate debug symbols
      run: |
        echo "Generating debug symbols..."
        if [ -f "output/libmylibrary.dylib" ]; then
          dsymutil output/libmylibrary.dylib -o output/libmylibrary.dSYM
          zip -r output/libmylibrary.dSYM.zip output/libmylibrary.dSYM
        fi

    - name: Upload dynamic library
      uses: actions/upload-artifact@v3
      with:
        name: roblox-executor-ios
        path: output/libmylibrary.dylib
        if-no-files-found: error

    - name: Upload debug symbols
      uses: actions/upload-artifact@v3
      with:
        name: debug-symbols
        path: output/libmylibrary.dSYM.zip
        if-no-files-found: warn

    - name: Upload resources
      uses: actions/upload-artifact@v3
      with:
        name: resources
        path: output/Resources/
        if-no-files-found: warn
