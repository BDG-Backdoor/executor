name: Build Roblox Executor iOS Dynamic Library

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest  # Use macOS for iOS compatible builds

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        echo "Installing dependencies..."
        # Install Homebrew packages
        brew install cmake pkg-config
        brew install openssl sqlite3
        brew install libzip json-c
        
        # Install iOS development dependencies
        brew install llvm
        brew install libomp
        
        # Install Lua with development headers and ensure availability
        brew install lua
        brew install luarocks
        
        # Find the Homebrew prefix (could be /usr/local or /opt/homebrew depending on architecture)
        BREW_PREFIX=$(brew --prefix)
        echo "Homebrew prefix: $BREW_PREFIX"
        
        # Check Lua installation
        echo "Lua installation details:"
        brew info lua
        
        # Find Lua headers and libraries using brew --prefix
        LUA_PREFIX=$(brew --prefix lua)
        echo "Lua prefix: $LUA_PREFIX"
        echo "Lua headers location:"
        find "$LUA_PREFIX" -name "lua.h" || echo "lua.h not found in $LUA_PREFIX"
        echo "Lua library location:"
        find "$LUA_PREFIX" -name "liblua*.dylib" -o -name "liblua*.a" || echo "liblua not found in $LUA_PREFIX"
        
        # Create build directories if they don't exist
        mkdir -p cmake
        mkdir -p /tmp/lua_include
        mkdir -p /tmp/lua_lib
        
        # Copy Lua headers and libraries to our own directories
        cp -f "$LUA_PREFIX/include/lua"*.h /tmp/lua_include/ || echo "Failed to copy lua headers"
        cp -f "$LUA_PREFIX/lib/liblua".* /tmp/lua_lib/ || echo "Failed to copy lua libraries"
        
        # Make sure FindLua.cmake is copied to the right place
        cp -f $GITHUB_WORKSPACE/cmake/FindLua.cmake cmake/ || echo "No FindLua.cmake to copy yet"
        
        # Create symlinks if possible (try without sudo first)
        mkdir -p $HOME/.local/include $HOME/.local/lib
        ln -sf "$LUA_PREFIX/include/lua"*.h $HOME/.local/include/ || echo "Failed to create user lua.h symlink"
        ln -sf "$LUA_PREFIX/lib/liblua".* $HOME/.local/lib/ || echo "Failed to create user liblua symlink"
        
        # Set environment variables to help CMake find Lua
        echo "LUA_DIR=$LUA_PREFIX" >> $GITHUB_ENV
        echo "LUA_INCLUDE_DIR=$LUA_PREFIX/include" >> $GITHUB_ENV
        echo "LUA_LIBRARIES=$LUA_PREFIX/lib/liblua.dylib" >> $GITHUB_ENV
        
        # Install LuaRocks and necessary libraries
        luarocks install luafilesystem || echo "Failed to install luafilesystem"
        
        # Create directories for project resources
        mkdir -p Resources/AIData/LocalModels
        mkdir -p Resources/AIData/Vulnerabilities
        mkdir -p lib
        mkdir -p cmake
        
        # Copy our custom FindLua.cmake file into the cmake directory
        cp $GITHUB_WORKSPACE/cmake/FindLua.cmake cmake/ || echo "No FindLua.cmake to copy"
        
        # Show current environment for debugging
        echo "DYLD_LIBRARY_PATH: $DYLD_LIBRARY_PATH"
        echo "Lua location in PATH:"
        which lua
        echo "Lua version:"
        lua -v

    - name: Install Dobby (Optional)
      id: install-dobby
      continue-on-error: true
      run: |
        echo "Building Dobby from source..."
        git clone --depth=1 https://github.com/jmpews/Dobby.git
        cd Dobby
        mkdir -p build && cd build
        
        # Configure for iOS
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DDOBBY_BUILD_SHARED_LIBRARY=OFF \
          -DDOBBY_BUILD_STATIC_LIBRARY=ON
        
        # Build Dobby
        cmake --build . --config Release
        
        # Create directory structure for CMake to find Dobby
        mkdir -p $GITHUB_WORKSPACE/external/dobby/lib
        mkdir -p $GITHUB_WORKSPACE/external/dobby/include
        
        # Copy the library and header files
        cp libdobby.a $GITHUB_WORKSPACE/external/dobby/lib/
        cp -r ../include/* $GITHUB_WORKSPACE/external/dobby/include/
        
        # Set env variable for CMake to find Dobby
        echo "DOBBY_DIR=$GITHUB_WORKSPACE/external/dobby" >> $GITHUB_ENV
        echo "Dobby installation completed successfully"

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Build Dynamic Library
      id: build
      run: |
        echo "Building the iOS dynamic library..."
        
        # Create build directory
        mkdir -p build
        
        # Set additional CMake args for dependencies
        EXTRA_CMAKE_ARGS=""
        
        # Add Dobby args if available
        if [ -d "$DOBBY_DIR" ]; then
          echo "Dobby found at $DOBBY_DIR, enabling Dobby support"
          EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DDobby_DIR=$DOBBY_DIR -DUSE_DOBBY=ON"
        else
          echo "Dobby not found, building without hooking functionality"
          EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DNO_DOBBY_HOOKS=ON"
        fi
        
        # Add Lua args for custom paths
        if [ -n "$LUA_INCLUDE_DIR" ] && [ -n "$LUA_LIBRARIES" ]; then
          echo "Setting Lua paths from environment: $LUA_INCLUDE_DIR and $LUA_LIBRARIES"
          EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DLUA_INCLUDE_DIR=$LUA_INCLUDE_DIR -DLUA_LIBRARIES=$LUA_LIBRARIES"
        else
          echo "Setting fallback Lua paths from copied files"
          EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DLUA_INCLUDE_DIR=/tmp/lua_include -DLUA_LIBRARIES=/tmp/lua_lib/liblua.dylib"
        fi
        
        # Configure CMake for iOS build with all options
        echo "CMake args: $EXTRA_CMAKE_ARGS"
        
        cmake -S . -B build \
          -DCMAKE_OSX_ARCHITECTURES="arm64" \
          -DCMAKE_OSX_DEPLOYMENT_TARGET="15.0" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_SYSTEM_NAME=iOS \
          -DENABLE_AI_FEATURES=ON \
          -DENABLE_LOCAL_TRAINING=ON \
          -DCMAKE_MODULE_PATH="$GITHUB_WORKSPACE/cmake" \
          ${EXTRA_CMAKE_ARGS}
        
        # Print config and diagnostics
        echo "CMake configuration:"
        cat build/CMakeCache.txt | grep -E "AI_FEATURES|LOCAL_TRAINING|DOBBY|NO_DOBBY|LUA"
        
        # Show Lua-related variables for debugging
        echo "LUA_INCLUDE_DIR from cache: $(grep LUA_INCLUDE_DIR build/CMakeCache.txt || echo 'Not found')"
        echo "LUA_LIBRARIES from cache: $(grep LUA_LIBRARIES build/CMakeCache.txt || echo 'Not found')"
        
        # Build the dynamic library
        cmake --build build --config Release -j4
        
        # Set the built library path
        echo "OUTPUT_LIB_PATH=${PWD}/lib/libmylibrary.dylib" >> $GITHUB_ENV

    - name: Export built library
      run: |
        echo "Exporting the built library..."
        mkdir -p output
        
        # Try both paths since the build output might be in different locations
        if [ -f "${PWD}/lib/libmylibrary.dylib" ]; then
          cp "${PWD}/lib/libmylibrary.dylib" output/
        elif [ -f "build/libmylibrary.dylib" ]; then
          cp "build/libmylibrary.dylib" output/
        else
          # Search for the dylib
          echo "Searching for libmylibrary.dylib..."
          find ${PWD} -name "libmylibrary.dylib" -exec cp {} output/ \;
        fi
        
        # Create and copy AI data directories
        mkdir -p output/Resources/AIData
        mkdir -p output/Resources/AIData/LocalModels
        mkdir -p output/Resources/AIData/Vulnerabilities
        
        # Create some sample data
        echo "{\"version\":\"1.0.0\",\"created\":\"$(date -u '+%Y-%m-%dT%H:%M:%SZ')\"}" > output/Resources/AIData/config.json

    - name: Check Build Output
      run: |
        echo "Checking the build output..."
        if [ -f "output/libmylibrary.dylib" ]; then
          echo "✅ libmylibrary.dylib exists."
          # Show file info
          file output/libmylibrary.dylib
          # Show architecture info
          lipo -info output/libmylibrary.dylib
          # Show symbols (filtering for AI-related functions)
          nm -g output/libmylibrary.dylib | grep -i "AI" || echo "No AI symbols found"
        else
          echo "❌ libmylibrary.dylib does not exist."
          echo "Files in output directory:"
          ls -la output/
          echo "Build directory contents:"
          find build -name "*.dylib" -o -name "*.a"
          exit 1  # Exit with error if the library does not exist
        fi

    - name: Generate debug symbols
      run: |
        echo "Generating debug symbols..."
        if [ -f "output/libmylibrary.dylib" ]; then
          dsymutil output/libmylibrary.dylib -o output/libmylibrary.dSYM
          zip -r output/libmylibrary.dSYM.zip output/libmylibrary.dSYM
        fi

    - name: Upload dynamic library
      uses: actions/upload-artifact@v3
      with:
        name: roblox-executor-ios
        path: output/libmylibrary.dylib
        if-no-files-found: error

    - name: Upload debug symbols
      uses: actions/upload-artifact@v3
      with:
        name: debug-symbols
        path: output/libmylibrary.dSYM.zip
        if-no-files-found: warn

    - name: Upload resources
      uses: actions/upload-artifact@v3
      with:
        name: resources
        path: output/Resources/
        if-no-files-found: warn
