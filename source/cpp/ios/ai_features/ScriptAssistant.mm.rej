--- source/cpp/ios/ai_features/ScriptAssistant.mm
+++ source/cpp/ios/ai_features/ScriptAssistant.mm
@@ -365,7 +365,7 @@ void ScriptAssistant::ClearConversationHistory() {
 
 // Load templates
 void ScriptAssistant::LoadTemplates(const std::string& templatesPath) {
-    std::lock_guard<std::mutex> lock(m_mutex);
+    std::lock_guard<std::mutex> lock(this->m_mutex);
     
     // In a real implementation, load templates from file
     // For this example, just add some default templates
@@ -443,10 +443,10 @@ std::vector<std::string> ScriptAssistant::GetExampleScriptDescriptions() {
 
 // Add system message
 void ScriptAssistant::AddSystemMessage(const std::string& message) {
-    std::lock_guard<std::mutex> lock(m_mutex);
+    std::lock_guard<std::mutex> lock(this->m_mutex);
     
     // Add to conversation history
-    m_conversationHistory.push_back(Message(MessageType::System, message));
+    this->m_conversationHistory.push_back(Message(MessageType::System, message));
     
     // Trim history if needed
     TrimConversationHistory();
@@ -454,10 +454,10 @@ void ScriptAssistant::AddSystemMessage(const std::string& message) {
 
 // Add user message
 void ScriptAssistant::AddUserMessage(const std::string& message) {
-    std::lock_guard<std::mutex> lock(m_mutex);
+    std::lock_guard<std::mutex> lock(this->m_mutex);
     
     // Add to conversation history
-    m_conversationHistory.push_back(Message(MessageType::User, message));
+    this->m_conversationHistory.push_back(Message(MessageType::User, message));
     
     // Trim history if needed
     TrimConversationHistory();
