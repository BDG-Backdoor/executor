// Ensure CI_BUILD is defined
#define CI_BUILD

#pragma once

#include <string>
#include <vector>
#include <optional>
#include <cstdint>
#include <atomic>
#include <functional>
#include <mutex>
#include <unordered_map>
#include <thread>
#include <condition_variable>
#include <future>
#include <memory>
#include <queue>
#include <deque>
#include <chrono>
#include <iostream>

// Include MemoryAccess.h first as it contains the mach_vm typedefs and compatibility wrappers
#include "MemoryAccess.h"

namespace iOS {
    /**
     * @class PatternScanner
     * @brief High-performance pattern scanner specialized for ARM64 architecture on iOS
     */
    class PatternScanner {
    public:
        // Scan modes for different performance profiles
        enum class ScanMode {
            Normal,     // Default balance of performance and memory usage
            Fast,       // Prioritize speed over memory usage
            LowMemory,  // Prioritize low memory usage over speed
            Stealth     // Avoid detection by hiding memory access patterns
        };
        
        // Pattern match confidence levels
        enum class MatchConfidence {
            Exact,      // Pattern matches exactly
            High,       // Pattern matches with high confidence (>90%)
            Medium,     // Pattern matches with medium confidence (>70%)
            Low         // Pattern matches with low confidence (>50%)
        };
        
        /**
         * @struct ScanResult
         * @brief Comprehensive result of a pattern scan with detailed metadata
         */
        struct ScanResult {
            mach_vm_address_t m_address;      // The address where the pattern was found
            std::string m_moduleName;         // The module name containing the pattern
            size_t m_offset;                  // Offset from module base address
            MatchConfidence m_confidence;     // Confidence level of the match
            uint64_t m_scanTime;              // Time taken to find this result in microseconds
            
            ScanResult() 
                : m_address(0), m_moduleName(""), m_offset(0), 
                  m_confidence(MatchConfidence::Exact), m_scanTime(0) {}
            
            ScanResult(mach_vm_address_t address, const std::string& moduleName, size_t offset,
                      MatchConfidence confidence = MatchConfidence::Exact, uint64_t scanTime = 0) 
                : m_address(address), m_moduleName(moduleName), m_offset(offset),
                  m_confidence(confidence), m_scanTime(scanTime) {}
            
            bool IsValid() const { return m_address != 0; }
        };
        
        // Constructor
        PatternScanner() {
            std::cout << "PatternScanner: Created" << std::endl;
        }
        
        // Stub implementations of the missing methods
        
        // Find a pattern in a module
        ScanResult FindPattern(const std::string& pattern) {
            std::cout << "PatternScanner: Would find pattern: " << pattern << std::endl;
            // Return a dummy result
            return ScanResult(0x1000, "DummyModule", 0x100);
        }
        
        // Get the base address of a module
        uintptr_t GetModuleBase(const std::string& moduleName) {
            std::cout << "PatternScanner: Would get base address for module: " << moduleName << std::endl;
            // Return a dummy address
            return 0x10000000;
        }
        
        // Initialize the scanner
        static bool Initialize() {
            std::cout << "PatternScanner: Initialized" << std::endl;
            return true;
        }
        
        // Convert a pattern string to bytes and mask
        static bool StringToPattern(const std::string& patternStr, 
                                  std::vector<uint8_t>& outBytes, 
                                  std::string& outMask) {
            // Simple conversion for stub
            outBytes = {0x90, 0x90, 0x90};
            outMask = "xxx";
            return true;
        }
    };
}
