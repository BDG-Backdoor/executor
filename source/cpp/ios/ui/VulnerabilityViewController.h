#pragma once

#include <string>
#include <vector>
#include <unordered_map>
#include <memory>
#include <functional>
#include "../ai_features/vulnerability_detection/VulnerabilityDetector.h"

// Forward declare Objective-C classes
#if defined(__OBJC__)
@class UIColor;
@class UIViewController;
#else
// For C++ code, define opaque types
#ifndef OBJC_OBJECT_DEFINED
#define OBJC_OBJECT_DEFINED
typedef struct objc_object objc_object;
#endif
typedef objc_object UIColor;
typedef objc_object UIViewController;
#endif

namespace iOS {
namespace UI {

/**
 * @class VulnerabilityViewController
 * @brief UI for displaying and managing detected vulnerabilities
 * 
 * This class provides a user interface for viewing vulnerabilities detected by 
 * the vulnerability detector, allowing users to see details, exploit vulnerabilities,
 * and manage the vulnerability database.
 */
class VulnerabilityViewController {
public:
    // Callback types
    using ScanButtonCallback = std::function<void()>;
    using ExploitButtonCallback = std::function<void(const AIFeatures::VulnerabilityDetection::VulnerabilityDetector::Vulnerability&)>;
    using DismissButtonCallback = std::function<void()>;
    
private:
    // Member variables
    void* m_viewController;            // Opaque pointer to UIViewController
    void* m_tableView;                 // Opaque pointer to UITableView
    void* m_scanButton;                // Opaque pointer to scan button
    void* m_statusLabel;               // Opaque pointer to status label
    void* m_progressView;              // Opaque pointer to progress view
    void* m_ledEffectView;             // Opaque pointer to LED effect view
    std::shared_ptr<AIFeatures::VulnerabilityDetection::VulnerabilityDetector> m_vulnerabilityDetector; // Vulnerability detector
    std::vector<AIFeatures::VulnerabilityDetection::VulnerabilityDetector::Vulnerability> m_vulnerabilities; // Current vulnerabilities
    ScanButtonCallback m_scanCallback; // Scan button callback
    ExploitButtonCallback m_exploitCallback; // Exploit button callback
    DismissButtonCallback m_dismissCallback; // Dismiss button callback
    bool m_isScanning;                 // Whether a scan is in progress
    
    // Private methods
    void InitializeUI();
    void SetupTableView();
    void SetupButtons();
    void SetupLEDEffects();
    void UpdateUI();
    void UpdateVulnerabilityList();
    void HandleVulnerabilitySelected(const AIFeatures::VulnerabilityDetection::VulnerabilityDetector::Vulnerability& vulnerability);
    void ShowVulnerabilityDetails(const AIFeatures::VulnerabilityDetection::VulnerabilityDetector::Vulnerability& vulnerability);
    void StartScanAnimation();
    void StopScanAnimation();
    void UpdateScanProgress(float progress, const std::string& statusText);
    std::string FormatVulnerabilityType(AIFeatures::VulnerabilityDetection::VulnerabilityDetector::VulnerabilityType type);
    std::string FormatExploitCode(const std::string& code);
    UIColor* GetColorForSeverity(float severity);
    void PulseLEDEffect(float duration, UIColor* color);
    
public:
    /**
     * @brief Constructor
     */
    VulnerabilityViewController();
    
    /**
     * @brief Destructor
     */
    ~VulnerabilityViewController();
    
    /**
     * @brief Initialize the view controller
     * @return True if initialization succeeded, false otherwise
     */
    bool Initialize();
    
    /**
     * @brief Get the native view controller
     * @return Opaque pointer to UIViewController
     */
    void* GetViewController() const;
    
    /**
     * @brief Set vulnerability detector
     * @param detector Vulnerability detector
     */
    void SetVulnerabilityDetector(std::shared_ptr<AIFeatures::VulnerabilityDetection::VulnerabilityDetector> detector);
    
    /**
     * @brief Set scan button callback
     * @param callback Function to call when scan button is pressed
     */
    void SetScanButtonCallback(ScanButtonCallback callback);
    
    /**
     * @brief Set exploit button callback
     * @param callback Function to call when exploit button is pressed
     */
    void SetExploitButtonCallback(ExploitButtonCallback callback);
    
    /**
     * @brief Set dismiss button callback
     * @param callback Function to call when dismiss button is pressed
     */
    void SetDismissButtonCallback(DismissButtonCallback callback);
    
    /**
     * @brief Update with scan progress
     * @param progress Scan progress (0-1)
     * @param statusText Status text
     */
    void UpdateWithScanProgress(float progress, const std::string& statusText);
    
    /**
     * @brief Update with scan results
     * @param result Scan result
     */
    void UpdateWithScanResults(const AIFeatures::VulnerabilityDetection::VulnerabilityDetector::ScanResult& result);
    
    /**
     * @brief Update with new vulnerability
     * @param vulnerability New vulnerability
     */
    void UpdateWithNewVulnerability(const AIFeatures::VulnerabilityDetection::VulnerabilityDetector::Vulnerability& vulnerability);
    
    /**
     * @brief Show vulnerability details
     * @param vulnerabilityId Vulnerability ID to show
     */
    void ShowVulnerabilityDetails(const std::string& vulnerabilityId);
    
    /**
     * @brief Start new scan
     * @param gameId Game ID
     * @param gameName Game name
     * @return True if scan was started
     */
    bool StartScan(const std::string& gameId, const std::string& gameName);
    
    /**
     * @brief Cancel current scan
     * @return True if scan was cancelled
     */
    bool CancelScan();
    
    /**
     * @brief Check if a scan is in progress
     * @return True if scanning
     */
    bool IsScanning() const;
    
    /**
     * @brief Filter vulnerabilities by type
     * @param type Vulnerability type to filter by
     */
    void FilterByType(AIFeatures::VulnerabilityDetection::VulnerabilityDetector::VulnerabilityType type);
    
    /**
     * @brief Filter vulnerabilities by severity
     * @param minSeverity Minimum severity to show (0-1)
     */
    void FilterBySeverity(float minSeverity);
    
    /**
     * @brief Reset filters
     */
    void ResetFilters();
    
    /**
     * @brief Get memory usage
     * @return Memory usage in bytes
     */
    uint64_t GetMemoryUsage() const;
};

} // namespace UI
} // namespace iOS
