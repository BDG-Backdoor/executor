#pragma once

#include "../../objc_isolation.h"
#include <string>
#include <memory>
#include <functional>
#include <vector>
#include <mutex>

// Forward declarations
namespace iOS {
    namespace AIFeatures {
        namespace VulnerabilityDetection {
            class VulnerabilityDetector;
            
            // Forward declare the Vulnerability struct
            struct Vulnerability;
        }
    }
}

namespace iOS {
    namespace UI {
        /**
         * @class VulnerabilityViewController
         * @brief UI controller for vulnerability detection and analysis
         *
         * This class provides the user interface for scanning for and exploiting
         * vulnerabilities in the game. It works with the VulnerabilityDetector
         * to find potential security issues and presents them to the user.
         */
        class VulnerabilityViewController {
        private:
            // Objective-C view controller
            void* m_viewController;
            
            // UI elements
            void* m_scanButton;
            void* m_resultsTableView;
            void* m_detailsView;
            void* m_exploitButton;
            void* m_progressIndicator;
            
            // Callbacks
            std::function<void()> m_scanButtonCallback;
            std::function<void(void*)> m_exploitButtonCallback; // Using void* to avoid nested type dependencies
            
            // Data
            std::shared_ptr<AIFeatures::VulnerabilityDetection::VulnerabilityDetector> m_vulnerabilityDetector;
            std::vector<void*> m_vulnerabilities; // Using void* to avoid nested type dependencies
            
            // For thread safety
            std::mutex m_vulnerabilitiesMutex;
            
            // Scanning state
            bool m_scanInProgress;
            float m_scanProgress;
            
            // Selected vulnerability
            int m_selectedVulnerabilityIndex;
            
        public:
            /**
             * @brief Constructor
             */
            VulnerabilityViewController();
            
            /**
             * @brief Destructor
             */
            ~VulnerabilityViewController();
            
            /**
             * @brief Initialize the view controller
             * @return true if initialization was successful
             */
            bool Initialize();
            
            /**
             * @brief Set scan button callback
             * @param callback Function to call when scan button is tapped
             */
            void SetScanButtonCallback(std::function<void()> callback);
            
            /**
             * @brief Set exploit button callback
             * @param callback Function to call when exploit button is tapped
             */
            void SetExploitButtonCallback(std::function<void(void*)> callback);
            
            /**
             * @brief Set vulnerability detector
             * @param detector Vulnerability detector to use
             */
            void SetVulnerabilityDetector(std::shared_ptr<AIFeatures::VulnerabilityDetection::VulnerabilityDetector> detector);
            
            /**
             * @brief Start a vulnerability scan
             * @param path1 Primary path to scan
             * @param path2 Secondary path to scan
             */
            void StartScan(const std::string& path1, const std::string& path2);
            
            /**
             * @brief Get the underlying view controller
             * @return Opaque pointer to view controller
             */
            void* GetViewController() const;
            
        private:
            /**
             * @brief Create UI elements
             */
            void CreateUI();
            
            /**
             * @brief Update UI state
             */
            void UpdateUI();
            
            /**
             * @brief Update scan progress
             * @param progress Progress value (0.0-1.0)
             * @param status Current status message
             */
            void UpdateProgress(float progress, const std::string& status);
            
            /**
             * @brief Show details for a vulnerability
             * @param index Index of vulnerability
             */
            void ShowVulnerabilityDetails(int index);
            
            // Friend classes for Objective-C helpers
            friend class VulnTableViewDataSource;
            friend class VulnTableViewDelegate;
        };
    }
}
